/* PureMVC AS2 FlashLite Demo - Balloonatroid Copyright (c) 2007, 2008 by Cliff Hall <clifford.hall@puremvc.org> and  Chandima Cumaranatunge <chandima.cumaranatunge@puremvc.org> Your reuse is governed by the Creative Commons Attribution 3.0 License */import balloonatroid.interfaces.IState;import balloonatroid.interfaces.IStateMachine;import balloonatroid.GameFacade;/** * The Game PLAY state. */class balloonatroid.model.game.PlayState implements IState{	/** Cannonical name of the State. */	public static var NAME:String = 'PLAY';		/** Singleton state object instance. */	private static var instance : IState;		/** Message Constants. */	private var SINGLETON_MSG	: String = "IState Singleton already constructed!";	/**	 * Constructor. 	 * 	 * <P>	 * This <code>IState</code> implementation is a Singleton, 	 * so you should not call the constructor 	 * directly, but instead call the static Singleton 	 * Factory method <code>IState.getInstance()</code>	 * 	 * @throws Error Error if Singleton instance has already been constructed	 * 	 */	public function PlayState()	{		if (instance != null) throw Error(SINGLETON_MSG);		instance = this;	}		/**	 * <code>Model</code> Singleton Factory method.	 * 	 * @return the Singleton instance	 */	public static function getInstance() : IState 	{		if (instance == null) instance = new PlayState( );		return instance;	}		/**	 * The logic to be executed when the state is entered.	 *	 * Broadcasts an {@link balloonatroid.GameFacade#ENTER_PLAY ENTER_PLAY} notification that is intercepted by	 * the {@link balloonatroid.view.PlayScreenMediator}.	 *	 * @param sm The {@link balloonatroid.model.GameProxy GameProxy} that delegates this state object.	 */	public function enter(sm:IStateMachine):Void {		sm.sendNotification( GameFacade.ENTER_PLAY );	}		public function execute(sm:IStateMachine):Void {	}		/**	 * The logic to be executed when the state is exited.	 *	 * Broadcasts an {@link balloonatroid.GameFacade#EXIT_PLAY EXIT_PLAY} notification that is intercepted by	 * the {@link balloonatroid.view.PlayScreenMediator}.	 *	 * @param sm The {@link balloonatroid.model.GameProxy GameProxy} that delegates this state object.	 */	public function exit(sm:IStateMachine):Void {		sm.sendNotification( GameFacade.EXIT_PLAY );	}		/**	 * State Name.	 * Useful for debugging.	 * @return The canonical name of the state.	 */	public function toString() : String 	{		return NAME;	}	}
/* PureMVC AS2 FlashLite Demo - Balloonatroid Copyright (c) 2007, 2008 by Cliff Hall <clifford.hall@puremvc.org> and  Chandima Cumaranatunge <chandima.cumaranatunge@puremvc.org> Your reuse is governed by the Creative Commons Attribution 3.0 License */import balloonatroid.interfaces.IState;import balloonatroid.interfaces.IStateMachine;import balloonatroid.GameFacade;import balloonatroid.model.BossProxy;/** * The Boss WANDER state. */class balloonatroid.model.boss.WanderState implements IState{	/** Cannonical name of the State. */	public static var NAME:String = 'WANDER';		/** Singleton state object instance. */	private static var instance : IState;		/** Message Constants. */	private var SINGLETON_MSG	: String = "IState Singleton already constructed!";	/**	 * Constructor. 	 * 	 * <P>	 * This <code>IState</code> implementation is a Singleton, 	 * so you should not call the constructor 	 * directly, but instead call the static Singleton 	 * Factory method <code>IState.getInstance()</code>	 * 	 * @throws Error if Singleton instance has already been constructed	 * 	 */	public function WanderState()	{		if (instance != null) throw Error(SINGLETON_MSG);		instance = this;	}		/**	 * <code>Model</code> Singleton Factory method.	 * 	 * @return the Singleton instance.	 */	public static function getInstance() : IState 	{		if (instance == null) instance = new WanderState( );		return instance;	}		/**	 * The logic to be executed when the state is entered.	 *	 * Positions the boss on the center of the screen and sets target to self.	 * Sets the wander radius to half the game screen width.	 *	 * @param sm The {@link balloonatroid.model.BossProxy BossProxy} that delegates this state object.	 * @todo Boss should initially wander off the top of the screen.	 */	public function enter(sm:IStateMachine):Void {		// place the boss centered just off the top of the screen		BossProxy(sm).setPosition( BossProxy(sm).gameProxy.gameWidth / 2 , 170 );		BossProxy(sm).setTargetToCurrentPos(); // initialize target to self				// set the wander radius to half the stage width		BossProxy(sm).setWanderRadius( BossProxy(sm).gameProxy.gameWidth / 2);	}		/**	 * The logic to be executed when the state is updated.	 *	 * Sends notification to randomly birth defender (should be more intelligent than this).	 * Should ultimately tie birthing to elapsed time rather than frame rate	 * and birthing frequency should be specifid in Boss data object class.	 * Wanders around its initial position.	 *	 * @param sm The {@link balloonatroid.model.BossProxy BossProxy} that delegates this state object.	 */	public function execute(sm:IStateMachine):Void {		if ( Math.floor(Math.random() * 50) == 0) 		{			sm.sendNotification( GameFacade.BIRTH_DEFENDER );		}		BossProxy(sm).wanderAroundTarget();	}		public function exit(sm:IStateMachine):Void {	}		/**	 * State Name.	 * Useful for debugging.	 * @return The canonical name of the state.	 */	public function toString() : String 	{		return NAME;	}	}
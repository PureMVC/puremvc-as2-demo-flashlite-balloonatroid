/* PureMVC AS2 FlashLite Demo - Balloonatroid Copyright (c) 2007, 2008 by Cliff Hall <clifford.hall@puremvc.org> and  Chandima Cumaranatunge <chandima.cumaranatunge@puremvc.org> Your reuse is governed by the Creative Commons Attribution 3.0 License */import org.puremvc.as2.interfaces.*;import org.puremvc.as2.patterns.mediator.*;import org.puremvc.as2.patterns.observer.*;import balloonatroid.*;import balloonatroid.interfaces.*;import balloonatroid.model.*;import balloonatroid.model.game.*;import balloonatroid.model.volley.*;/** * Proxy for interacting with the {@link balloonatroid.model.volley.VolleyDO Volley Balloon Data Object}. * Inherits the {@link balloonatroid.interfaces.IStateMachine IStateMachine} interface implementation to access the volley state machine. * <P> * Currently implements the volley: * <ul> * <li> {@link balloonatroid.model.volley.DormantState Dormant state (recovered and waiting to volley)}. * <li> {@link balloonatroid.model.volley.InFlightState In flight state (volleyed and moving up)}. * <li> {@link balloonatroid.model.volley.RecoverState Recover state (went off screen and in recovery mode)}. * </ul> */class balloonatroid.model.VolleyProxy extends AbstractSpriteProxy implements IProxy, IStateMachine{	/** Cannonical name of the Proxy. */	public static var NAME : String = 'VolleyProxy';		/** Reference to the singletion instance of {@link balloonatroid.model.volley.DormantState}. */	public static var DORMANT	 		: IState 		/** Reference to the singletion instance of {@link balloonatroid.model.volley.InFlightState}. */	public static var INFLIGHT	 		: IState 		/** Reference to the singletion instance of {@link balloonatroid.model.volley.RecoverState}. */	public static var RECOVER		 	: IState 		/** Local reference to {@link balloonatroid.model.GameProxy}. */	public var gameProxy : GameProxy;		/** Local reference to {@link balloonatroid.model.SpriteEntitiesProxy}. */	public var spriteEntitiesProxy : SpriteEntitiesProxy;		/** 	 * The list of sprite types that constitute valid hits on this sprite.	 * @see balloonatroid.model.AbstractSpriteDO#DEFENDER	 * @see balloonatroid.model.AbstractSpriteDO#BOSS	 */	public static var VALIDHITLIST:Array = 	[												AbstractSpriteDO.DEFENDER,												AbstractSpriteDO.BOSS											];		/**	 * Constructor. 	 * Assigns singleton state objects to the state reference variables.	 * Sets the target position of volley sprite to self.	 * @param dataObject Volley balloon data object.	 */	public function VolleyProxy( dataObject : VolleyDO ) 	{		super( NAME, dataObject );				// Assign IState singleton instances 		DORMANT 		= DormantState.getInstance(); 		INFLIGHT 		= InFlightState.getInstance();		RECOVER		 	= RecoverState.getInstance();				// get references to proxies		gameProxy = GameProxy( facade.retrieveProxy( GameProxy.NAME ) );		spriteEntitiesProxy = SpriteEntitiesProxy( facade.retrieveProxy( SpriteEntitiesProxy.NAME ) );				// initialize target to self		setTargetToCurrentPos();	}		/**	 * Check to determine if sprite is off the stage.	 *	 * @return Boolean true if sprite is completely off the stage.	 */	public function isOffStage():Boolean	{		var sprite_bounds_obj:Object = sprite.getBounds(gameProxy.theStage);		return ( sprite_bounds_obj.xMin > gameProxy.gameWidth ) || ( sprite_bounds_obj.xMax < 0 ) ||					( sprite_bounds_obj.yMin > gameProxy.gameHeight ) || ( sprite_bounds_obj.yMax < 0 );	}			/**	 * Check if this sprite has valid hits.	 * Sets the {@link balloonatroid.model.AbstractSpriteDO#hitBySprite} property 	 * of the hit sprites to this sprite.	 *	 * @return AbstractSpriteDO the last valid sprite that was hit.	 */	public function hitCheck():AbstractSpriteDO	{		// get all the hits on this sprite		var hitList:Array = spriteEntitiesProxy.hitList( sprite );		var hitSprite:AbstractSpriteDO = null;		for (var i in hitList) 		{			// check against the valid hit sprite list			for (var j in VolleyProxy.VALIDHITLIST) 			{				if ( VolleyProxy.VALIDHITLIST[j] == hitList[i].spriteType )				{					hitSprite = hitList[i];					hitSprite.hitBySprite = sprite;				}			}		}		return hitSprite;	}		/**	 * Cast the Data Object to its actual type.	 * 	 * @return the Data Object cast to {@link balloonatroid.model.volley.VolleyDO VolleyDO}.	 */	public function get sprite():VolleyDO	{		return VolleyDO( data );	}	}
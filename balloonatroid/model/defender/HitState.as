/* PureMVC AS2 FlashLite Demo - Balloonatroid Copyright (c) 2007, 2008 by Cliff Hall <clifford.hall@puremvc.org> and  Chandima Cumaranatunge <chandima.cumaranatunge@puremvc.org> Your reuse is governed by the Creative Commons Attribution 3.0 License */import balloonatroid.interfaces.IState;import balloonatroid.interfaces.IStateMachine;import balloonatroid.GameFacade;import balloonatroid.model.DefenderProxy;/** * The Defender HIT state. * This state is not a singleton as there can be  * multiple defenders with their own state machines */class balloonatroid.model.defender.HitState implements IState{	/** Cannonical name of the State. */	public static var NAME:String = 'HIT';		/** 	 * Defender tumble direstion. 	 * Set to +1 for clockwise -1 for anti-clockwise tumble.	 */	private var tumbleDirection:Number = 1		/**	 * The logic to be executed when the state is entered.	 *	 * Sets target to location of object that hit this.	 * Sets the tumble direction based on the position of the sprite	 * that hit this. Tumbles at triple the max speed.	 *	 * @param sm The {@link balloonatroid.model.DefenderProxy DefenderProxy} that delegates this state object.	 */	public function enter(sm:IStateMachine):Void 	{		// set target to location of object that hit it		DefenderProxy(sm).setTarget( DefenderProxy(sm).sprite.hitBySprite._x , 										DefenderProxy(sm).sprite.hitBySprite._y );		// triple the max speed for death spiral		DefenderProxy(sm).sprite.speedMax = 3 * DefenderProxy(sm).sprite.speedMax;		// set tumble direction to anti-clockwise if hit from the right		if ( DefenderProxy(sm).sprite.hitBySprite._x - DefenderProxy(sm).sprite._x > 0 )		{			tumbleDirection = -1;		}	}		/**	 * The logic to be executed when the state is updated.	 *	 * Flees from target location while tumbling.	 * Broadcasts {@link balloonatroid.GameFacade#DEFENDER_IS_DEAD DEFENDER_IS_DEAD} notification if defender is off screen.	 * Broadcasts {@link balloonatroid.GameFacade#GO_DEFENDER_HIT GO_DEFENDER_HIT} notification to transition	 * to the hit state if the {@link balloonatroid.model.AbstractSpriteDO#hitBySprite hitBySprite} property is set.	 *	 * @param sm The {@link balloonatroid.model.DefenderProxy DefenderProxy} that delegates this state object.	 */	public function execute(sm:IStateMachine):Void 	{		DefenderProxy(sm).fleeFromTarget(); // flee from target		MovieClip(DefenderProxy(sm).sprite)._rotation += 5 * tumbleDirection; // tumble		if (DefenderProxy(sm).isOffStage()) 		{			sm.sendNotification( GameFacade.DEFENDER_IS_DEAD, DefenderProxy(sm).getProxyName() );		}	}		public function exit(sm:IStateMachine):Void 	{	}		/**	 * State Name.	 * 	 * @return String the state name	 */	public function toString() : String 	{		return NAME;	}	}
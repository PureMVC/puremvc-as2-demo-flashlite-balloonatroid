/* PureMVC AS2 FlashLite Demo - Balloonatroid Copyright (c) 2007, 2008 by Cliff Hall <clifford.hall@puremvc.org> and  Chandima Cumaranatunge <chandima.cumaranatunge@puremvc.org> Your reuse is governed by the Creative Commons Attribution 3.0 License */import balloonatroid.interfaces.IState;import balloonatroid.interfaces.IStateMachine;import balloonatroid.GameFacade;import balloonatroid.model.DefenderProxy;/** * The Defender ATTACK state. * This state is not a singleton as there can be  * multiple defenders with their own state machines */class balloonatroid.model.defender.AttackState implements IState{	/** Cannonical name of the State. */	public static var NAME:String = 'ATTACK';		/**	 * The logic to be executed when the state is entered.	 *	 * Defender comes straight down at max speed.	 *	 * @param sm The {@link balloonatroid.model.DefenderProxy DefenderProxy} that delegates this state object.	 */	public function enter(sm:IStateMachine):Void 	{ 		DefenderProxy(sm).setSpeed( 0 , DefenderProxy(sm).sprite.speedMax );	}	/**	 * The logic to be executed when the state is updated.	 *	 * Moves the defender based on current speed and direction.	 * Broadcasts {@link balloonatroid.GameFacade#DEFENDER_IS_DEAD DEFENDER_IS_DEAD} notification if defender is off screen.	 * Broadcasts {@link balloonatroid.GameFacade#GO_DEFENDER_HIT GO_DEFENDER_HIT} notification to transition	 * to the hit state if the {@link balloonatroid.model.AbstractSpriteDO#hitBySprite hitBySprite} property is set.	 *	 * @param sm The {@link balloonatroid.model.DefenderProxy DefenderProxy} that delegates this state object.	 */	public function execute(sm:IStateMachine):Void 	{		DefenderProxy(sm).move();		if (DefenderProxy(sm).isOffStage()) 		{			sm.sendNotification( GameFacade.DEFENDER_IS_DEAD, DefenderProxy(sm).getProxyName() );		}		else		{			if ( DefenderProxy(sm).sprite.hitBySprite ) 			{				sm.sendNotification( GameFacade.GO_DEFENDER_HIT, 									DefenderProxy(sm).getProxyName() ); // go to the defender hit state			}		}	}		public function exit(sm:IStateMachine):Void 	{	}		/**	 * State Name.	 * Useful for debugging.	 * @return The canonical name of the state.	 */	public function toString() : String 	{		return NAME;	}	}
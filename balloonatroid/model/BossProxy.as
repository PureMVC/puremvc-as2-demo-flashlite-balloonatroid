/* PureMVC AS2 FlashLite Demo - Balloonatroid Copyright (c) 2007, 2008 by Cliff Hall <clifford.hall@puremvc.org> and  Chandima Cumaranatunge <chandima.cumaranatunge@puremvc.org> Your reuse is governed by the Creative Commons Attribution 3.0 License */import org.puremvc.as2.interfaces.*;import org.puremvc.as2.patterns.mediator.*;import org.puremvc.as2.patterns.observer.*;import balloonatroid.*;import balloonatroid.interfaces.*;import balloonatroid.model.*;import balloonatroid.model.game.*;import balloonatroid.model.boss.*;/** * Proxy for interacting with the Boss Balloon Data Object. * Inherits the {@link balloonatroid.interfaces.IStateMachine IStateMachine} interface implementation to access the boss state machine. * Currently implements the boss: * <ul> * <li> {@link balloonatroid.model.boss.WanderState Wander state (back and forth movement)}. * </ul> * @todo Implement the 'roam', 'attack', 'evade', and 'hit' states. */class balloonatroid.model.BossProxy extends AbstractSpriteProxy implements IProxy, IStateMachine{	/** Cannonical name of the Proxy. */	public static var NAME : String = 'BossProxy';		/** Reference to the singletion instance of {@link balloonatroid.model.boss.WanderState}. */	public static var WANDER	 		: IState 		/** Local reference to {@link balloonatroid.model.GameProxy}. */	public var gameProxy : GameProxy;		/**	 * Constructor. 	 * Sets the target of position of sprite to self.	 * @param dataObject abstract boss balloon data object (this is the proxy for all bosses).	 */	public function BossProxy( dataObject : AbstractBossDO ) 	{		super( NAME, dataObject );				// Assign IState singleton instances 		WANDER			= balloonatroid.model.boss.WanderState.getInstance(); 				// get references to game proxy		gameProxy = GameProxy( facade.retrieveProxy( GameProxy.NAME ) );				// initialize target to self		setTargetToCurrentPos();	}		/**	 * Get the number of defender children remaining.	 * 	 * @return the number of defender children.	 */	public function get remainingChildren():Number	{		return AbstractBossDO( data ).children;	}		/**	 * Set the number of defender children.	 * 	 * @param the number of defender children.	 */	public function set remainingChildren(n:Number):Void	{		AbstractBossDO( data ).children = n;	}		/**	 * Check to determine if sprite is off the stage.	 *	 * @return Boolean true if sprite is completely off the stage.	 */	public function isOffStage():Boolean	{		// get sprite bounds relative to the stage		var sprite_bounds_obj:Object = sprite.getBounds(gameProxy.theStage);		return ( sprite_bounds_obj.xMin > gameProxy.gameWidth ) || ( sprite_bounds_obj.xMax < 0 ) ||					( sprite_bounds_obj.yMin > gameProxy.gameHeight ) || ( sprite_bounds_obj.yMax < 0 );	}			/**	 * Cast the Data Object to its actual type.	 * 	 * @return the Data Object cast to {@link balloonatroid.model.boss.AbstractBossDO AbstractBossDO}.	 */	public function get sprite():AbstractBossDO	{		return AbstractBossDO( data );	}	}
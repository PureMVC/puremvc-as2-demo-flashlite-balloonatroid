/* PureMVC AS2 FlashLite Demo - Balloonatroid Copyright (c) 2007, 2008 by Cliff Hall <clifford.hall@puremvc.org> and  Chandima Cumaranatunge <chandima.cumaranatunge@puremvc.org> Your reuse is governed by the Creative Commons Attribution 3.0 License */import org.puremvc.as2.interfaces.IProxy;import org.puremvc.as2.patterns.proxy.Proxy;import balloonatroid.*;import balloonatroid.interfaces.*;import balloonatroid.model.game.*;import mx.utils.*;/** * Proxy for interacting with the {@link balloonatroid.model.game.GameDO Game Data Object}. * Implements the {@link balloonatroid.interfaces.IStateMachine IStateMachine} interface to access the game state machine. * <P> * Currently implements the game: * <ul> * <li> {@link balloonatroid.model.game.SplashScreenState Splash screen state}. * <li> {@link balloonatroid.model.game.PlayState Play screen state}. * </ul> * @todo Implement the 'choose level', 'help/info screen', and 'buy more levels' states. */class balloonatroid.model.GameProxy extends 	org.puremvc.as2.patterns.proxy.Proxy implements IProxy, IStateMachine{	/** Cannonical name of the Proxy. */	public static var NAME : String = 'GameProxy';		/** Reference to the singletion instance of {@link balloonatroid.model.game.SplashScreenState}. */	public static var SPLASHSTATE 		: IState 		/** Reference to the singletion instance of {@link balloonatroid.model.game.PlayState}. */	public static var PLAYSTATE 		: IState 	/**	 * Constructor.	 * Creates a new instance of {@link balloonatroid.model.game.GameDO} for the data object.	 * Saves a reference to the root MovieClip as the data object of the game.	 * Assigns singleton state objects to the state reference variables.	 * @param stageObject root MovieClip.	 */	public function GameProxy( stageObject : MovieClip )	{		super( NAME, new balloonatroid.model.game.GameDO() );				// Assign IState singleton instances 		SPLASHSTATE 		= SplashScreenState.getInstance(); 		PLAYSTATE 			= PlayState.getInstance();				// Initialize game properties		data.theStage = stageObject;	}		/**	 * {@inheritDoc} 	 */	public function changeState( aState : IState ) : Void 	{		if (gameDO.currentState != null) 		{			gameDO.currentState.exit(this);		}		gameDO.previousState = gameDO.currentState;		gameDO.currentState = aState;		gameDO.currentState.enter(this);	}		/**	 * {@inheritDoc} 	 */	public function update() : Void 	{		var currentTime:Number = getTimer();		if (gameDO.currentState != null) 		{			gameDO.currentState.execute(this);		}		gameDO.lastUpdateTime = currentTime; // update time	}		/**	 * {@inheritDoc} 	 */	public function getCurrentState() : IState 	{		return gameDO.currentState;	}		/**	 * {@inheritDoc} 	 */	public function getPreviousState() : IState 	{		return gameDO.previousState;	}		/**	 * Get the width of the stage specified in {@link balloonatroid.model.game.GameDO}.	 */	public function get gameWidth() : Number 	{        return GameDO.GAME_WIDTH;    }		/**	 * Get the height of the stage specified in {@link balloonatroid.model.game.GameDO}.	 */	public function get gameHeight() : Number 	{        return GameDO.GAME_HEIGHT;    }		/**	 * Get the root MovieClip.	 */	public function get theStage() : MovieClip 	{        return gameDO.theStage;    }		/**	 * Cast the data object to its actual type.	 * 	 * @return The root MovieClip cast to MovieClip.	 */	public function get gameDO() : GameDO	{		return GameDO( data );	}	}
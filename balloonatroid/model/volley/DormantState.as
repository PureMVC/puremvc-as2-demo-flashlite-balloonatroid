/* PureMVC AS2 FlashLite Demo - Balloonatroid Copyright (c) 2007, 2008 by Cliff Hall <clifford.hall@puremvc.org> and  Chandima Cumaranatunge <chandima.cumaranatunge@puremvc.org> Your reuse is governed by the Creative Commons Attribution 3.0 License */import balloonatroid.interfaces.IState;import balloonatroid.interfaces.IStateMachine;import balloonatroid.GameFacade;import balloonatroid.model.VolleyProxy;/** * The Volley DORMANT state. * Recovered and waiting to volley. */class balloonatroid.model.volley.DormantState implements IState{	/** Cannonical name of the State. */	public static var NAME:String = 'DORMANT';		/** Singleton state object instance. */	private static var instance : IState;		/** Message Constants. */	private var SINGLETON_MSG	: String = "IState Singleton already constructed!";	/**	 * Constructor. 	 * 	 * <P>	 * This <code>IState</code> implementation is a Singleton, 	 * so you should not call the constructor 	 * directly, but instead call the static Singleton 	 * Factory method <code>IState.getInstance()</code>	 * 	 * @throws Error Error if Singleton instance has already been constructed	 * 	 */	public function DormantState()	{		if (instance != null) throw Error(SINGLETON_MSG);		instance = this;	}		/**	 * <code>Model</code> Singleton Factory method.	 * 	 * @return the Singleton instance	 */	public static function getInstance() : IState 	{		if (instance == null) instance = new DormantState( );		return instance;	}		/**	 * The logic to be executed when the state is entered.	 *	 * Positions the volley balloon at the center bottom (recovered location).	 *	 * @param sm The {@link balloonatroid.model.VolleyProxy VolleyProxy} that delegates this state object.	 */	public function enter(sm:IStateMachine):Void {		VolleyProxy(sm).setPosition( VolleyProxy(sm).sprite._x , 										VolleyProxy(sm).gameProxy.gameHeight - 25 );	}		/**	 * The logic to be executed when the state is updated.	 *	 * Moves to the target location using an {@link balloonatroid.model.AbstractSpriteProxy#arriveAtTarget() arrive} algorithm.	 *	 * @param sm The {@link balloonatroid.model.VolleyProxy VolleyProxy} that delegates this state object.	 */	public function execute(sm:IStateMachine):Void {		VolleyProxy(sm).arriveAtTarget();	}		public function exit(sm:IStateMachine):Void {	}		/**	 * State Name.	 * Useful for debugging.	 * @return The canonical name of the state.	 */	public function toString() : String 	{		return NAME;	}	}
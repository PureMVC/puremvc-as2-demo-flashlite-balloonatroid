/* PureMVC AS2 FlashLite Demo - Balloonatroid Copyright (c) 2007, 2008 by Cliff Hall <clifford.hall@puremvc.org> and  Chandima Cumaranatunge <chandima.cumaranatunge@puremvc.org> Your reuse is governed by the Creative Commons Attribution 3.0 License */import org.puremvc.as2.interfaces.*;import org.puremvc.as2.patterns.mediator.*;import org.puremvc.as2.patterns.observer.*;import balloonatroid.*;import balloonatroid.interfaces.*;import balloonatroid.model.*;import balloonatroid.model.game.*;import balloonatroid.model.defender.*;/** * Proxy for interacting with the {@link balloonatroid.model.defender.AbstractDefenderDO Defender Balloon Data Object}. * Inherits the {@link balloonatroid.interfaces.IStateMachine IStateMachine} interface implementation to access the volley state machine. * <P> * Currently implements the defender: * <ul> * <li> {@link balloonatroid.model.defender.AttackState Attack state}. * <li> {@link balloonatroid.model.defender.HitState Hit state}. * </ul> * @todo Implement the 'roam', and 'evade' states. */class balloonatroid.model.DefenderProxy extends AbstractSpriteProxy implements IProxy, IStateMachine{		/** Local reference to {@link balloonatroid.model.GameProxy}. */	public var gameProxy : GameProxy;		/**	 * Constructor. 	 * Defenders are created by the {@link balloonatroid.view.BossSpriteMediator Boss Balloon Mediator}.	 * Sets the target position of sprite to self.	 * @param 	proxyName Name for defender proxy - should be the same as its view counterpart	 *			(implementation is to set it to the instance name of the <code>Movieclip</code>).	 * @param dataObject Defender balloon data object.	 * @see balloonatroid.GameFacade#BIRTH_DEFENDER	 * @see balloonatroid.view.BossSpriteMediator#handleNotification()	 */	public function DefenderProxy( proxyName:String, dataObject:AbstractDefenderDO ) 	{		// use the sprite instance name for the proxy		super( proxyName, dataObject );				// get references to game proxy		gameProxy = GameProxy( facade.retrieveProxy( GameProxy.NAME ) );				// initialize target to self		setTargetToCurrentPos();	}		/**	 * Check to determine if sprite is off the stage.	 *	 * @return Boolean true if sprite is completely off the stage.	 */	public function isOffStage():Boolean	{		// get sprite bounds relative to the stage		var sprite_bounds_obj:Object = sprite.getBounds(gameProxy.theStage);		return ( sprite_bounds_obj.xMin > gameProxy.gameWidth ) || ( sprite_bounds_obj.xMax < 0 ) ||					( sprite_bounds_obj.yMin > gameProxy.gameHeight ) || ( sprite_bounds_obj.yMax < 0 );	}			/**	 * Cast the Data Object to its actual type.	 * 	 * @return the Data Object cast to {@link balloonatroid.model.defender.AbstractDefenderDO AbstractDefenderDO}. 	 */	public function get sprite():AbstractDefenderDO	{		return AbstractDefenderDO( data );	}	}
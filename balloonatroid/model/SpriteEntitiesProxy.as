/* PureMVC AS2 FlashLite Demo - Balloonatroid Copyright (c) 2007, 2008 by Cliff Hall <clifford.hall@puremvc.org> and  Chandima Cumaranatunge <chandima.cumaranatunge@puremvc.org> Your reuse is governed by the Creative Commons Attribution 3.0 License */import org.puremvc.as2.interfaces.IProxy;import org.puremvc.as2.patterns.proxy.Proxy;import balloonatroid.*;import balloonatroid.interfaces.*;import balloonatroid.model.*;import mx.utils.*;/** * Maintains a list of sprite instances for hit testing and other sprite interactions. */class balloonatroid.model.SpriteEntitiesProxy extends 	org.puremvc.as2.patterns.proxy.Proxy implements IProxy{	/** Cannonical name of the Proxy. */	public static var NAME : String = 'SpriteEntities';	/**	 * Constructor. 	 * Sets the data object to a new instance of <code>mx.utils.Collection</code>.	 * @see <a href="http://livedocs.adobe.com/flash/9.0/main/00002617.html">mx.utils.Collection</a>	 */	public function SpriteEntitiesProxy()	{		super( NAME, new mx.utils.CollectionImpl() );	}		/**	 * Do a hit test with the sprite collection.	 * 	 * @param target sprite to check for hit.	 * @return Array List of sprites that currently hit the target.	 */	public function hitList( target:AbstractSpriteDO ) : Array	{		var hit_arr:Array = new Array();		var itr:mx.utils.Iterator = spriteCollection.getIterator();		while (itr.hasNext()) 		{			var sprite:AbstractSpriteDO = AbstractSpriteDO(itr.next());			if ( target.hitTest( sprite ) )			{				hit_arr.push( sprite );			}		}		return hit_arr;	}		/**	 * Add game sprite to the game sprite collection.	 * 	 * @param sprite Game sprite entity.	 * @return Boolean <code>true</code> if sprite was added successfully.	 */	public function addSprite( sprite:AbstractSpriteDO ) : Boolean	{		return spriteCollection.addItem( sprite );	}		/**	 * Removes passed sprite to the game sprite collection	 * 	 * @param sprite Game sprite entity.	 * @return Boolean <code>true</code> if sprite was removed successfully	 */	public function removeSprite( sprite:AbstractSpriteDO ) : Boolean	{		return spriteCollection.removeItem( sprite );	}		/**	 * Cast the Data Object to its actual type.	 * 	 * @return the Data Object cast to <code>mx.utils.Collection</code>	 */	public function get spriteCollection() : Collection	{		return Collection( data );	}	}
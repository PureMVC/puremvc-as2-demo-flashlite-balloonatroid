import org.puremvc.as2.interfaces.*;import org.puremvc.as2.patterns.mediator.*;import org.puremvc.as2.patterns.observer.*;import balloonatroid.*;import balloonatroid.view.*;import balloonatroid.model.*;/** * A Mediator to help with debugging Notifications. *  * Add all notification interests to the {@link #aNotificationList} {@code Array}. * Intercepts all interested notifications and:  * <ol> * <li> Appends them to the 'txtStatus'  text field instance on the _root timeline (if it exists). * <li> Traces them to the output panel. * <li> Logs them to <a href="http://osflash.org/xray">Xray</a>. * </ol> * Handles special notifications. * <ul> * <li> {@link balloonatroid.GameFacade#DEBUG_ERROR} Notification body is logged as an {@code ERROR} on Xray. * <li> {@link balloonatroid.GameFacade#DEBUG_INFO} Notification body is logged as {@code INFO} on Xray. * <li> {@link balloonatroid.GameFacade#CLEAR_STATUS} Notification body erases the 'txtStatus' field. * </ul> */class DebugHelperMediator extends Mediator implements IMediator {		/** Cannonical name of the Mediator. */	public static var NAME:String = 'DebugHelperMediator';		/** 	 * List of Notification interests. 	 * @use	Add notification interests to this array.	 */	private var aNotificationList:Array = [ 												GameFacade.STARTUP,												GameFacade.QUIT,																								GameFacade.LOADHISTORY,												GameFacade.HISTORYLOADED,																								GameFacade.DEBUG_ERROR,												GameFacade.DEBUG_INFO,												GameFacade.CLEAR_STATUS,																								GameFacade.GO_SPLASH,												GameFacade.ENTER_SPLASH,												GameFacade.EXIT_SPLASH,												GameFacade.SPLASH_ENTER_DONE,												GameFacade.SPLASH_EXIT_DONE,																								GameFacade.GO_PLAY,												GameFacade.ENTER_PLAY,												GameFacade.EXIT_PLAY,												GameFacade.PLAY_ENTER_DONE,												GameFacade.PLAY_EXIT_DONE,																								GameFacade.GO_VOLLEY_DORMANT,																								GameFacade.ADD_SPRITE_ENTITY																						   ];		/**	 * Constructor. 	 */ 	public function DebugHelperMediator( viewComponent:MovieClip ) {		// pass the viewComponent to the superclass where 		// it will be stored in the inherited viewComponent property		super( NAME, viewComponent );	}		/**	 * List of all notifications this Mediator is interested in.	 * <P>	 * Automatically called by the framework when the mediator	 * is registered with the view.</P>	 * 	 * @return Array the list of Nofitication interests listed in {@link #aNotificationList}	 */	public function listNotificationInterests():Array 	{		return aNotificationList;	}		/**	 * Handle all notifications this Mediator is interested in.	 * <P>	 * Called by the framework when a notification is sent that	 * this mediator expressed an interest in when registered.	 * Notification body is:	 * <ul>	 * <li> Appended to the 'txtStatus'  text field instance on the _root timeline (if it exists).	 * <li> Traced to the output panel.	 * <li> Logged to <a href="http://osflash.org/xray">Xray</a>.	 * </ul> 	 *	 * @param INotification a notification 	 * @see #aNotificationList	 */	public function handleNotification( note:INotification ):Void {		switch (note.getName()) {							case GameFacade.DEBUG_ERROR:				GameFacade.log.error( note.getName(), String(note.getBody()) );				traceStatus('ERROR: ' + String(note.getBody()));				break;						case GameFacade.DEBUG_INFO:				GameFacade.log.error( note.getName(), String(note.getBody()) );				traceStatus('INFO: ' + String(note.getBody()));				break;							case GameFacade.CLEAR_STATUS: // clear status field if it exists				if (_root.txtStatus) 				{					_root.txtStatus.text = "Debug Status:\r"; 				}				break;							default:				GameFacade.log.info( 'Notification: ' + note.getName(), String(note.getBody()) );				traceStatus( 'NOTE: ' + note.getName() + ' - ' + String(note.getBody()) );				break;		}	}		/**	 * Convenience method for debugging.	 *	 * Writes to the ouput panel and 'txtStatus' field on the root timeline (if field exists).	 * @param s String to write out.	 */	public function traceStatus(s:String):Void	{		if ( _root.txtStatus ) 		{			_root.txtStatus.text = s + "\r" + _root.txtStatus.text; 		}		trace(s); // trace to output window	}}
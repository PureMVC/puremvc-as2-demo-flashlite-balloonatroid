/* PureMVC AS2 FlashLite Demo - Balloonatroid Copyright (c) 2007, 2008 by Cliff Hall <clifford.hall@puremvc.org> and  Chandima Cumaranatunge <chandima.cumaranatunge@puremvc.org> Your reuse is governed by the Creative Commons Attribution 3.0 License */import org.puremvc.as2.interfaces.*;import org.puremvc.as2.patterns.mediator.*;import org.puremvc.as2.patterns.observer.*;import balloonatroid.*;import balloonatroid.view.*;import balloonatroid.model.*;/** * Mediator for the Shield Balloon MovieClip. */class balloonatroid.view.ShieldSpriteMediator extends Mediator implements IMediator{	/** Cannonical name of the Mediator. */	public static var NAME:String = 'ShieldSpriteMediator';		/** Local reference to {@link balloonatroid.model.ShieldProxy}. */	private var shieldProxy:ShieldProxy;		/**	 * Constructor. 	 */ 	public function ShieldSpriteMediator( viewComponent : MovieClip ) 	{		// pass the viewComponent to the superclass		super( NAME, viewComponent );	}		/**	 * Called by the View when the Mediator is registered.	 * @use Expects <code>ShieldProxy</code> to be registered previously.	 */ 	public function onRegister( ) : Void 	{		// get local reference to the ShieldProxy		shieldProxy = ShieldProxy( facade.retrieveProxy( ShieldProxy.NAME ) );	}	/**	 * List of all notifications this Mediator is interested in.	 * <P>	 * Automatically called by the framework when the mediator	 * is registered with the view.</P>	 * 	 * @return The list of Nofitication interests listed in.	 */	public function listNotificationInterests():Array 	{		return [ 			   ];	}		/**	 * Handle all notifications this Mediator is interested in.	 * <P>	 * Called by the framework when a notification is sent that	 * this mediator expressed an interest in when registered	 * (see <code>listNotificationInterests</code>.</P>	 * 	 * @param INotification a notification 	 */	public function handleNotification( note : INotification ) : Void 	{	}		/**	 * Cast the viewComponent to its actual type.	 * 	 * @return The viewComponent cast to MovieClip	 */	public function get sprite():MovieClip{		return MovieClip(viewComponent);	}}
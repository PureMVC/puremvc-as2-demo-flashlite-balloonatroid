import org.puremvc.as2.interfaces.*;import org.puremvc.as2.patterns.mediator.*;import org.puremvc.as2.patterns.observer.*;import balloonatroid.*;import balloonatroid.view.*;import balloonatroid.model.*;import mx.utils.Delegate;/** * A Mediator for interacting with the stage. * <P> * Top level Mediator for the game. Registers the following child mediators for each game screen. * <ul> * <li> {@link balloonatroid.view.SplashScreenMediator} * <li> {@link balloonatroid.view.PlayScreenMediator} * <li> {@link balloonatroid.view.DebugHelperMediator} * </ul> */class StageMediator extends Mediator implements IMediator {		/** Cannonical name of the Mediator */	public static var NAME:String = 'StageMediator';		/** Local reference to {@link balloonatroid.model.GameProxy} */	private var gameProxy : GameProxy;		/**	 * Constructor. 	 */ 	public function StageMediator(viewComponent:MovieClip) 	{		super( NAME, viewComponent );	}	/**	 * Called by the View when the Mediator is registered.	 * 	 * Registers the game screen mediators. {@link balloonatroid.view.DebugHelperMediator} is	 * registered only if {@link balloonatroid.GameFacade#debug} is set to {@code true}.	 * Assigns a local reference to {@link balloonatroid.model.GameProxy} to {@link #gameProxy}.	 * Registers {@link #enterFrameHandler()} method as an {@code EnterFrame} event handler to the stage.	 *	 * @use Expects {@link balloonatroid.model.GameProxy} to be registered already.	 */ 	public function onRegister( ) : Void 	{		// register child mediators		if ( GameFacade.debug ) facade.registerMediator( new DebugHelperMediator( theStage ) ); // for debugging only		facade.registerMediator( new SplashScreenMediator( theStage ) ); 		facade.registerMediator( new PlayScreenMediator( theStage ) ); 				gameProxy = GameProxy( facade.retrieveProxy( GameProxy.NAME ) );				theStage.onEnterFrame = Delegate.create( this, enterFrameHandler );	}		/**	 * Update the current game state on each {@code EnterFrame} event.	 */	private function enterFrameHandler():Void 	{		gameProxy.update();	}		/**	 * Cast the viewComponent to its actual type.	 * 	 * @return The viewComponent cast to MovieClip	 */	public function get theStage():MovieClip	{		return MovieClip(viewComponent);	}}
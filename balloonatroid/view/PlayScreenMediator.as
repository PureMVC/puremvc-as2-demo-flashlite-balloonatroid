import org.puremvc.as2.interfaces.*;import org.puremvc.as2.patterns.mediator.*;import org.puremvc.as2.patterns.observer.*;import balloonatroid.*;import balloonatroid.view.*;import balloonatroid.model.*;import balloonatroid.model.game.*;import balloonatroid.model.shield.*;import balloonatroid.model.volley.*;import balloonatroid.model.boss.*;import mx.utils.Delegate;/** * A Mediator for interacting with the Splash Screen. * <P> * Mediates the UI for the Play Screen by adding buttons, initiating entry and exit * animations to the screen, registering and unregistering button press, keydown, * and softkey command handlers. The level <code>MovieClip</code> is loaded on the first frame of the entry animation. * Acts as the view screen counterpart for the {@link balloonatroid.model.game.PlayState PLAY state}. *  */class PlayScreenMediator extends Mediator implements IMediator {		/** Cannonical name of the Mediator. */	public static var NAME : String = 'PlayScreenMediator';		/** Local reference to {@link balloonatroid.model.GameProxy}. */	private var gameProxy 	: GameProxy;		/** Local reference to {@link balloonatroid.model.VolleyProxy}. */	private var volleyProxy : VolleyProxy;		/** Local reference to {@link balloonatroid.model.BossProxy}. */	private var bossProxy 	: BossProxy;		/** Reference to the 'volley_up_btn' button instance in <code>Balloonatroid.fla</code>. */	private var volleyUp_btn 		: MovieClip;		/** Reference to the 'volley_left_btn' button instance in <code>Balloonatroid.fla</code>. */	private var volleyLeft_btn 		: MovieClip;		/** Reference to the 'volley_right_btn' button instance in <code>Balloonatroid.fla</code>. */	private var volleyRight_btn 	: MovieClip;		/** Reference to the 'volley_balloon_mc' instance in <code>Balloonatroid.fla</code>. */	private var volleyBalloon_mc 	: MovieClip;		/** Reference to the 'shield_balloon_mc' instance in <code>Balloonatroid.fla</code>. */	private var shieldBalloon_mc 	: MovieClip;		/** 	 * Reference to the 'level_container_mc' instance in <code>Balloonatroid.fla</code>. 	 * Level Movie is loaded into this container <code>MovieClip</code> in <code>Balloonatroid.fla</code>.	 */	private var levelContainer_mc 	: MovieClip;		/** Reference to the 'boss_balloon_mc' instance in <code>LevelXX.fla</code> (level <code>MovieClip</code>). */	private var bossBalloon_mc 		: MovieClip;		/** Reference to the 'defender_balloon_mc' instance in <code>LevelXX.fla</code> (level <code>MovieClip</code>). */	private var defenderBalloon_mc 	: MovieClip;		/** Set to <code>true</code> on start of screen exit animation. */	private var exitingFlag = false;		/**	 * Constructor.	 * @use Expects <code>GameProxy</code> to be registered previously.	 */  	public function PlayScreenMediator(viewComponent:Object) 	{		// pass the viewComponent to the superclass		super( NAME, viewComponent );			}		/**	 * Called by the View when the Mediator is registered.	 * @use Expects <code>GameProxy</code> to be registered previously.	 */ 	public function onRegister( ) : Void 	{		gameProxy = GameProxy( facade.retrieveProxy( GameProxy.NAME ) );	}		/**	 * List of all notifications this Mediator is interested in.	 * <P>	 * Automatically called by the framework when the mediator	 * is registered with the view.</P>	 * 	 * @return The list of Nofitication interests listed in.	 */	public function listNotificationInterests() : Array 	{		return [ 					GameFacade.PLAY_ENTER_DONE,						GameFacade.PLAY_EXIT_DONE,						GameFacade.ENTER_PLAY,					GameFacade.EXIT_PLAY			   ];	}		/**	 * Handle all notifications this Mediator is interested in.	 * <P>	 * Called by the framework when a notification is sent that	 * this mediator expressed an interest in when registered.	 * <ul>	 * <li> Plays play screen entry animation on receipt of {@link balloonatroid.GameFacade#ENTER_PLAY ENTER_PLAY}.	 *		The level <code>MovieClip</code> is loaded on the first frame of the animation.	 * <li> Registers UI buttons, boss and volley balloons on receipt of {@link balloonatroid.GameFacade#PLAY_ENTER_DONE PLAY_ENTER_DONE}.	 * <li> Actions on {@link balloonatroid.GameFacade#PLAY_EXIT_DONE PLAY_EXIT_DONE} not implemented yet.	 * <li> Unregisters and removes UI buttons on receipt of {@link balloonatroid.GameFacade#EXIT_PLAY EXIT_PLAY}.	 * </ul> 	 *	 * @param INotification a notification 	 * @see #listNotificationInterests()	 * @see Timeline in <code>Balloonatroid.fla</code>	 */	public function handleNotification( note : INotification ):Void 	{			switch ( note.getName() ) {								//Broadcast game PLAY state on entry				case GameFacade.ENTER_PLAY:					// start the entry animaion					playScreen.gotoAndPlay('play_enter_trans_start');					// disable focus rectangle ( focus rectangle should true for debugging with Xray )					playScreen._focusRect=true;					break;									// Generated by timeline script at the end of play enter animation				case GameFacade.PLAY_ENTER_DONE: 									// Set SoftKeys to play labels					fscommand2("SetSoftKeys", "Quit", "");									// Assign UI components references (instance names assigned in timeline)					// LevelXX.swf is loaded into 'level_container_mc' in Ballonatroid.fla					// Volley buttons, Volley balloon and Shield balloon are in Ballonatroid.fla					volleyUp_btn = playScreen.volley_up_btn;					volleyLeft_btn = playScreen.volley_left_btn;					volleyRight_btn = playScreen.volley_right_btn;					volleyBalloon_mc = playScreen.volley_balloon_mc;					shieldBalloon_mc = playScreen.shield_balloon_mc;					levelContainer_mc = playScreen.level_container_mc;					// Boss and Defender balloons in LevelXX.swf					bossBalloon_mc = levelContainer_mc.boss_balloon_mc;					defenderBalloon_mc = levelContainer_mc.defender_balloon_mc;										/**  Prepare the **VOLLEY** balloon */					facade.registerProxy( new VolleyProxy( VolleyDO( volleyBalloon_mc ) ) ); // model					sendNotification( GameFacade.GO_VOLLEY_DORMANT ); // go to the volley dormant state					facade.registerMediator( new VolleySpriteMediator( volleyBalloon_mc ) ); // view					volleyProxy = VolleyProxy( facade.retrieveProxy( VolleyProxy.NAME ) ); // get reference to volley proxy										/** Prepare the **BOSS** balloon */					facade.registerProxy( new BossProxy( AbstractBossDO( bossBalloon_mc ) ) ); // model					sendNotification( GameFacade.GO_BOSS_WANDER ); // go to the boss WANDER state					facade.registerMediator( new BossSpriteMediator( bossBalloon_mc ) ); // view					bossProxy = BossProxy( facade.retrieveProxy( BossProxy.NAME ) ); // get reference to boss proxy									// Register click handlers on volley buttons					volleyUp_btn.onPress = Delegate.create( this, onVolleyUP );					volleyLeft_btn.onPress = Delegate.create( this, onVolleyLEFT );					volleyRight_btn.onPress = Delegate.create( this, onVolleyRIGHT );										// disable tabs					volleyUp_btn.tabEnabled = false;					volleyLeft_btn.tabEnabled = false;					volleyRight_btn.tabEnabled = false;										// listen for user input					Key.addListener( this );															break;									// Generated by timeline script at the end of play exit animation				case GameFacade.PLAY_EXIT_DONE: 										break;									//Broadcast game PLAY state on exit				case GameFacade.EXIT_PLAY:					// reset soft keys					fscommand2("ResetSoftKeys");					// remove listeners					Key.removeListener( this );					volleyUp_btn.onPress = null;					volleyLeft_btn.onPress = null;					volleyRight_btn.onPress = null;					break;		}	}		/**	 * Getter for the <code>MovieClip</code> that the level movie will be loaded into.	 *	 * @return Level container <code>MovieClip</code> {@link #levelContainer_mc instance}.	 */	public function get levelContainer():MovieClip 	{		return 	levelContainer_mc;	}		/**	 * Getter for the master instance of the defender balloon.	 *	 * This instance of the defender that is off stage 	 * on the loaded level swf file <code>LevelXX.swf</code> will be	 * be duplicated to create new defender instances	 * by the {@link balloonatroid.view.BossSpriteMediator boss sprite mediator}.	 *	 * @return MovieClip defender balloon {@link #defenderBalloon_mc instance}.	 * @see <code>LevelXX.fla</code> stage.	 * @implementationNote 	Not very elegent, but will use this method until we	 * 						figure out how to access Library assets on a Loaded SWF.	 */	public function get defenderInstance():MovieClip 	{		return 	defenderBalloon_mc;	}		/**	 * Handles user guestures to Volley UP.	 * Broadcasts the {@link balloonatroid.GameFacade#GO_VOLLEY_INFLIGHT GO_VOLLEY_INFLIGHT} Notification.	 */	public function onVolleyUP():Void 	{		if ( ! exitingFlag ) 		{ 			sendNotification( GameFacade.GO_VOLLEY_INFLIGHT); // volley state		}	}		/**	 * Handles user guestures to Volley LEFT.	 * Broadcasts the {@link balloonatroid.GameFacade#VOLLEY_AIM_LEFT VOLLEY_AIM_LEFT} Notification.	 */	public function onVolleyLEFT():Void 	{		if ( ! exitingFlag ) 		{			sendNotification( GameFacade.VOLLEY_AIM_LEFT);		}	}		/**	 * Handles user guestures to Volley RIGHT.	 * Broadcasts the {@link balloonatroid.GameFacade#VOLLEY_AIM_RIGHT VOLLEY_AIM_RIGHT} Notification.	 */	public function onVolleyRIGHT():Void 	{		if ( ! exitingFlag ) 		{			sendNotification( GameFacade.VOLLEY_AIM_RIGHT);		}	}		/**	 * Handles user guestures to quit game.	 * Broadcasts the {@link balloonatroid.GameFacade#QUIT QUIT} Notification.	 */	public function onQuit():Void 	{		sendNotification( GameFacade.QUIT ); // quit	}		/**	 * Handle phone's navigation and soft key presses.	 * LEFT arrow or softkey calls {@link #onQuit()}	 * RIGHT arrow or softkey calls {@link #onPlay()}	 */	public function onKeyDown():Void 	{			switch ( Key.getCode() ) 			{				case ExtendedKey.SOFT1:					onQuit();					break;									case Key.UP:				case Key.ENTER:				case Key.SPACE:					onVolleyUP();					break;									case Key.LEFT:					onVolleyLEFT();					break;									case Key.RIGHT:					onVolleyRIGHT();					break;			}	}		/**	 * Cast the viewComponent to its actual type.	 * 	 * @return The viewComponent cast to MovieClip	 */	public function get playScreen() : MovieClip	{		return MovieClip( viewComponent );	}}
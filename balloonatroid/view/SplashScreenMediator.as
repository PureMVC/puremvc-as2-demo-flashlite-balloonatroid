import org.puremvc.as2.interfaces.*;import org.puremvc.as2.patterns.mediator.*;import org.puremvc.as2.patterns.observer.*;import balloonatroid.*;import balloonatroid.view.*;import balloonatroid.model.*;import balloonatroid.model.game.*;import mx.utils.Delegate;/** * A Mediator for interacting with the Splash Screen. * <P> * Mediates the UI for the Splash Screen by adding buttons, initiating entry and exit * animations to the screen, registering and unregistering button press, keydown, * and softkey command handlers. Waits until the {@link balloonatroid.controller.LoadHistoryCommand  game history shared object} is loaded * before drawing the UI. Acts as the view screen counterpart for the {@link balloonatroid.model.game.SplashScreenState SPLASH screen state}. * Plays the splash screen entry animation on notification of game SPLASH state entry. *  */class SplashScreenMediator extends Mediator implements IMediator {	/** Cannonical name of the Mediator. */	public static var NAME:String = 'SplashScreenMediator';		/** Local reference to {@link balloonatroid.model.GameProxy}. */	private var gameProxy:GameProxy;		/** Linkage Identifier name for the 'Quit Button' button in {@code balloonatroid.fla} library. */	public static var QUIT_BTN_ID : String 			= 'Quit Button';		/** Linkage Identifier name for the 'Play Button' button in {@code balloonatroid.fla} library. */	public static var PLAY_BTN_ID : String 			= 'Play Button';		/** Reference to the 'Play Button' button instance. */	private var quit_btn : MovieClip;		/** Reference to the 'Play Button' button instance. */	private var play_btn : MovieClip;		/** Set to <code>true</code> on start of screen exit animation. */	private var exitingFlag 		= false;		/** Set to <code>true</code> on notification of successful load of history shared object. */	private var historyLoadedFlag 	= false;		/**	 * Constructor.	 */ 	public function SplashScreenMediator( viewComponent : Object ) 	{		// pass the viewComponent to the superclass		super( NAME, viewComponent );	}		/**	 * Called by the View when the Mediator is registered.	 * @use Expects <code>GameProxy</code> to be registered previously.	 */ 	public function onRegister( ) : Void 	{		gameProxy = GameProxy( facade.retrieveProxy( GameProxy.NAME ) );	}		/**	 * List of all notifications this Mediator is interested in.	 * <P>	 * Automatically called by the framework when the mediator	 * is registered with the view.</P>	 * 	 * @return The list of Nofitication interests listed in.	 */	public function listNotificationInterests():Array 	{		return [ 					GameFacade.HISTORYLOADED,					GameFacade.ENTER_SPLASH,					GameFacade.EXIT_SPLASH,					GameFacade.SPLASH_ENTER_DONE,					GameFacade.SPLASH_EXIT_DONE				   ];	}		/**	 * Handle all notifications this Mediator is interested in.	 * <P>	 * Called by the framework when a notification is sent that	 * this mediator expressed an interest in when registered.	 * <ul>	 * <li> Plays splash screen entry animation on receipt of {@link balloonatroid.GameFacade#ENTER_SPLASH ENTER_SPLASH}.	 * <li> Adds and registers UI buttons on receipt of {@link balloonatroid.GameFacade#HISTORYLOADED HISTORYLOADED}.	 * <li> Broadcasts notification {@link balloonatroid.GameFacade#GO_PLAY GO_PLAY} to go to the game PLAY state on receipt 	 *		of {@link balloonatroid.GameFacade#SPLASH_EXIT_DONE SPLASH_EXIT_DONE}.	 * <li> Unregisters and removes UI buttons on receipt of {@link balloonatroid.GameFacade#EXIT_SPLASH EXIT_SPLASH}.	 * </ul> 	 *	 * @param INotification a notification 	 * @see #listNotificationInterests()	 */	public function handleNotification( note : INotification ) : Void 	{			switch ( note.getName() ) {									//Broadcast game SPLASH state on entry				case GameFacade.ENTER_SPLASH: 					// start the entry animaion					splashScreen.gotoAndPlay('splash_enter_trans_start');					// disable focus rectangle ( focus rectangle should true for debugging with Xray )					splashScreen._focusRect=false;										break;									// Broadcast by root timeline script at the end of splash enter animation				case GameFacade.SPLASH_ENTER_DONE: 										break;													// Broadcast by GameHistoryProxy when the game history shared object has been loaded 				case GameFacade.HISTORYLOADED: 									// Set SoftKeys to splash labels					fscommand2("SetSoftKeys", "Quit", "Play");									// Attach Play Button and place it after game history has been loaded					play_btn = splashScreen.attachMovie(PLAY_BTN_ID, PLAY_BTN_ID, splashScreen.getNextHighestDepth());					play_btn._x = gameProxy.gameWidth - 50;					play_btn._y = gameProxy.gameHeight - 30;					play_btn.onPress = Delegate.create( this, onPlay );										// Attach Quit Button and place it					quit_btn = splashScreen.attachMovie(QUIT_BTN_ID, QUIT_BTN_ID, splashScreen.getNextHighestDepth());					quit_btn._x = 10;					quit_btn._y = gameProxy.gameHeight - 30;					quit_btn.onPress = Delegate.create( this, onQuit );											// disable tabs					play_btn.tabEnabled = false;					quit_btn.tabEnabled = false;																											// listen for user input					Key.addListener( this );										// game history has been loaded					historyLoadedFlag = true; 										break;									// Generated by timeline script at the end of splash exit animation				case GameFacade.SPLASH_EXIT_DONE: 					sendNotification( GameFacade.GO_PLAY );		// go to the play state					break;									//Broadcast game SPLASH state on exit				case GameFacade.EXIT_SPLASH: 					// reset soft keys					fscommand2("ResetSoftKeys");					// remove listeners					Key.removeListener( this );					quit_btn.onPress = null;					play_btn.onPress = null;					// Remove buttons					unloadMovie(quit_btn);					unloadMovie(play_btn);										break;						}	}		/**	 * Handles user guestures to play game.	 * Plays the splash screen exit animation in {@code balloonatroid.fla} timeline.	 */	public function onPlay():Void 	{		if ( ! exitingFlag ) 		{			splashScreen.gotoAndPlay('splash_exit_trans_start'); // go and play splash exit animation			exitingFlag = true; // in exit animation		}	}		/**	 * Handles user guestures to quit game.	 * Broadcasts the {@link balloonatroid.GameFacade#QUIT QUIT} Notification.	 */	public function onQuit():Void 	{		sendNotification( GameFacade.QUIT ); // quit	}		/**	 * Handle phone's navigation and soft key presses.	 * LEFT arrow or softkey calls {@link #onQuit()}	 * RIGHT arrow or softkey calls {@link #onPlay()}	 */	public function onKeyDown():Void 	{		switch ( Key.getCode() ) 		{			case Key.LEFT:			case ExtendedKey.SOFT1:				onQuit();				break;							case Key.RIGHT:			case ExtendedKey.SOFT2:				if ( historyLoadedFlag ) onPlay(); // works only after game history has been loaded				break;		}	}		/**	 * Cast the viewComponent to its actual type.	 * 	 * @return The viewComponent cast to MovieClip	 */	public function get splashScreen():MovieClip{		return MovieClip(viewComponent);	}}
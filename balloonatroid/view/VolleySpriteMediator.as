import org.puremvc.as2.interfaces.*;import org.puremvc.as2.patterns.mediator.*;import org.puremvc.as2.patterns.observer.*;import balloonatroid.*;import balloonatroid.view.*;import balloonatroid.model.*;import balloonatroid.model.game.*;import mx.utils.Delegate;/** * A Mediator for interacting with the Volley Sprite. * Adds and removes itself from the {@link balloonatroid.model.SpriteEntitiesProxy sprite entities collection }  * on {@link #onRegister()} and {@link #onRemove()}. * Registers <code>EnterFrame</code> {@link #enterFrameHandler() handler} and updates its current state. */class VolleySpriteMediator extends Mediator implements IMediator {		/** Cannonical name of the Mediator. */	public static var NAME:String = 'VolleySpriteMediator';		/** Local reference to {@link balloonatroid.model.VolleyProxy}. */	private var volleyProxy : VolleyProxy;		/**	 * Constructor. 	 */ 	public function VolleySpriteMediator( viewComponent : MovieClip ) {		// pass the viewComponent to the superclass		super( NAME, viewComponent );	}		/**	 * Called by the View when the Mediator is registered.	 * Registers {@link #enterFrameHandler()} method as an {@code EnterFrame} event handler to the sprite.	 * Adds volley balloon to the {@link balloonatroid.model.SpriteEntitiesProxy sprite entities collection }.	 * @use Expects <code>VolleyProxy</code> and <code>SpriteEntitiesProxy</code> to be registered previously.	 */ 	public function onRegister( ) : Void 	{		volleyProxy = VolleyProxy( facade.retrieveProxy( VolleyProxy.NAME ) );		// listen for enterframe events		sprite.onEnterFrame = Delegate.create( this, enterFrameHandler );		// Add volley balloon to sprite entities collection		SpriteEntitiesProxy( facade.retrieveProxy( SpriteEntitiesProxy.NAME ) ).addSprite(AbstractSpriteDO( sprite ));	}		/**	 * Called by the View when the Mediator is removed.	 * Removes volley balloon from the {@link balloonatroid.model.SpriteEntitiesProxy sprite entities collection }.	 */ 	public function onRemove( ) : Void 	{		SpriteEntitiesProxy( facade.retrieveProxy( SpriteEntitiesProxy.NAME ) ).removeSprite(AbstractSpriteDO( sprite ));	}		/**	 * List of all notifications this Mediator is interested in.	 * <P>	 * Automatically called by the framework when the mediator	 * is registered with the view.</P>	 * 	 * @return The list of Nofitication interests listed in.	 */	public function listNotificationInterests():Array 	{		return [ 			   ];	}		/**	 * Handle all notifications this Mediator is interested in.	 * <P>	 * Called by the framework when a notification is sent that	 * this mediator expressed an interest in when registered	 * (see <code>listNotificationInterests</code>.</P>	 * 	 * @param INotification a notification 	 */	public function handleNotification( note : INotification ) : Void 	{	}		/**	 * {@code EnterFrame} handler updates the current volley balloon state.	 */	private function enterFrameHandler():Void 	{		volleyProxy.update();	}		/**	 * Cast the viewComponent to its actual type.	 * 	 * @return The viewComponent cast to MovieClip	 */	public function get sprite():MovieClip{		return MovieClip(viewComponent);	}}
/* PureMVC AS2 FlashLite Demo - Balloonatroid Copyright (c) 2007, 2008 by Cliff Hall <clifford.hall@puremvc.org> and  Chandima Cumaranatunge <chandima.cumaranatunge@puremvc.org> Your reuse is governed by the Creative Commons Attribution 3.0 License */import balloonatroid.interfaces.IState;import org.puremvc.as2.interfaces.INotifier;/** * The interface definition for a finite state machine (FSM). * <P> * Game agent behavior is implemented using a Finite State Machine (FSM). FSM implementation * is based on Chapter 2 of the excellent book by Mat Buckland called * <em><a href="http://www.ai-junkie.com/books/toc_pgaibe.html">Programming Game AI by Example</a></em>. * <P> * Each stateful game entity implements a state machine ( {@code balloonatroid.interfaces.IStateMachine} )  * in its model, specifically in its proxy class. The state machine interface defines methods to change  * and update the current state, as well as, getters to access the current and previous state objects.  * <P> * Quite simply, the model for interactive game entities is the state machine. All model logic will be * implemented within each state object. A reference to a state object needs to be passed as a parameter * when changing states. State changes are not checked against a state transition table for validity.  * * @see <a href="http://en.wikipedia.org/wiki/Finite_state_machine">Finite state machine</a> on Wikipedia. * @see <a href="http://www.ai-junkie.com/books/toc_pgaibe.html">Programming Game AI by Example</a> by Mat Buckland. */interface balloonatroid.interfaces.IStateMachine extends INotifier{	/**	 * Change the state.	 * 	 * @param IState a state object for the new state.	 */	public function changeState( aState : IState ) : Void		/**	 * Update the current state.	 * <P>	 * This method is usually called on each {@code EnterFrame} to update position,	 * conduct hit-testing etc.	 */	public function update() : Void;		/**	 * Get the current state.	 * 	 * @return The {@link balloonatroid.interfaces.IState} object for the current state.	 */    public function getCurrentState() : IState;			/**	 * Get the current state.	 * 	 * @return The {@link balloonatroid.interfaces.IState} object for the previous state.	 */	public function getPreviousState() : IState;}
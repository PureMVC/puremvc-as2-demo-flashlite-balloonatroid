/* PureMVC AS2 FlashLite Demo - Balloonatroid Copyright (c) 2007, 2008 by Cliff Hall <clifford.hall@puremvc.org> and  Chandima Cumaranatunge <chandima.cumaranatunge@puremvc.org> Your reuse is governed by the Creative Commons Attribution 3.0 License */import org.puremvc.as2.interfaces.IFacade;import org.puremvc.as2.patterns.facade.Facade;import org.puremvc.as2.patterns.observer.Notification;import balloonatroid.controller.*;import balloonatroid.view.*;//  logging routinesimport com.blitzagency.xray.logger.LogManager;import com.blitzagency.xray.logger.XrayLogger; /** * The concrete Facade instance. * <P> * Defines notification constants, initializes controller, provides global * convenience methods  */class balloonatroid.GameFacade extends Facade implements IFacade{	/**  	 * Reference to Xray logger instance	 *	 * @see <a href="http://osflash.org/xray">Xray ( The AdminTool )</a>	 */	public static var log : XrayLogger;  		/**  	 * Debug flag. True by default. StageMediator will register DebugHelperMediator	 * to generate status messages if true. Set to false to disable all debugging.	 *	 * @see balloonatroid.view.StageMediator#StageMediator()	 * @see balloonatroid.view.DebugHelperMediator#DebugHelperMediator()	 */	public static var debug : Boolean = true; 		/**  	 * Notification name to generate a DEBUG log entry in Xray.	 *	 * @see balloonatroid.view.DebugHelperMediator#handleNotification()	 */	public static var DEBUG_ERROR:String  		= "debug error";	/**  	 * Notification name to generate an INFO log entry in Xray.	 *	 * @see balloonatroid.view.DebugHelperMediator#handleNotification()	 */	public static var DEBUG_INFO:String  		= "debug info";	/**  	 * Notification name to clear the status field.	 *	 * @see balloonatroid.view.DebugHelperMediator#handleNotification()	 */	public static var CLEAR_STATUS:String  		= "clear status field";		/** 	 * Notification name bound to <code>GoGameSplashCommand</code> command. 	 * Transitions game to the splash state. Notification is broadcast	 * from <code>StartupCommand</code>.	 *	 * @see balloonatroid.controller.GoGameSplashCommand	 * @see balloonatroid.controller.StartupCommand	 */	public static var GO_SPLASH:String  		= "go to the game splash state";		/** 	 * Notification name that notifies entry to game splash state. 	 * Broadcast from <code>SplashScreenState</code>.	 *	 * @see balloonatroid.model.game.SplashScreenState#enter()	 */	public static var ENTER_SPLASH:String  		= "splash screen state has been entered message";		/** 	 * Notification name that notifies exit from game splash state. 	 * Broadcast from <code>SplashScreenState</code>.	 *	 * @see balloonatroid.model.game.SplashScreenState#exit()	 */	public static var EXIT_SPLASH:String  		= "splash screen state has been exited message";			/** 	 * Notification name that notifies completion of splash screen exit animation. 	 * Broadcast from the root timeline in <code>balloonatroid.fla</code> flash document.	 *	 * @see <code>balloonatroid.fla</code> flash document.	 */	public static var SPLASH_EXIT_DONE:String  	= "splash state exit animation complete message";			/** 	 * Notification name that notifies completion of splash screen entry animation. 	 * Broadcast from the root timeline in <code>balloonatroid.fla</code> flash document.	 *	 * @see <code>balloonatroid.fla</code> flash document.	 */	public static var SPLASH_ENTER_DONE:String  = "splash state enter animation complete message";		/** 	 * Notification name bound to <code>GoGamePlayCommand</code> command. 	 * Transitions game to the play state. Notification is broadcast	 * from <code>SplashScreenMediator</code> when the splash screen exit animation	 * is complete.	 *	 * @see balloonatroid.controller.GoGamePlayCommand	 * @see balloonatroid.view.SplashScreenMediator#handleNotification()	 */	public static var GO_PLAY:String  			= "go to the game play state";		/** 	 * Notification name that notifies entry to game play state. 	 * Broadcast from <code>PlayState</code>.	 *	 * @see balloonatroid.model.game.PlayState#enter()	 */	public static var ENTER_PLAY:String  		= "play screen state has been entered message";		/** 	 * Notification name that notifies exit from game play state. 	 * Broadcast from <code>PlayState</code>.	 *	 * @see balloonatroid.model.game.PlayState#exit()	 */	public static var EXIT_PLAY:String  		= "play screen state has been exited message";		/** 	 * Notification name that notifies completion of play screen exit animation. 	 * Broadcast from the root timeline in <code>balloonatroid.fla</code> flash document.	 */	public static var PLAY_EXIT_DONE:String  	= "play state exit animation complete message";		/** 	 * Notification name that notifies completion of play screen entry animation. 	 * Broadcast from the root timeline in <code>balloonatroid.fla</code> flash document.	 */	public static var PLAY_ENTER_DONE:String  	= "play state enter animation complete message";		/** 	 * Notification name bound to <code>GoVolleyDormantCommand</code> command. 	 * Transitions Volley Balloon to the dormant state. Notification is broadcast	 * from <code>RecoverState</code>.	 *	 * @see balloonatroid.controller.GoVolleyDormantCommand	 * @see balloonatroid.model.volley.RecoverState#execute()	 */	public static var GO_VOLLEY_DORMANT:String  = "go to volley balloon dormant state";			/** 	 * Notification name bound to <code>GoVolleyInFlightCommand</code> command. 	 * Transitions Volley Balloon to the in flight state. Notification is broadcast	 * from <code>PlayScreenMediator</code>.	 *	 * @see balloonatroid.controller.GoVolleyInFlightCommand	 * @see balloonatroid.view.PlayScreenMediator#onVolleyUP()	 */	public static var GO_VOLLEY_INFLIGHT:String = "go to volley balloon in flight state";		/** 	 * Notification name bound to <code>GoVolleyRecoverCommand</code> command. 	 * Transitions Volley Balloon to the recover state. Notification is broadcast	 * from <code>InFlightState</code>.	 *	 * @see balloonatroid.controller.GoVolleyRecoverCommand	 * @see balloonatroid.model.volley.InFlightState#execute()	 */	public static var GO_VOLLEY_RECOVER:String  = "go to volley balloon transitioning state";		/** 	 * Notification name bound to <code>VolleyAimLeftCommand</code> command. 	 * Moves Volley Balloon to the left. Notification is broadcast	 * from <code>PlayScreenMediator</code>.	 *	 * @see balloonatroid.controller.VolleyAimLeftCommand	 * @see balloonatroid.view.PlayScreenMediator#onVolleyLEFT()	 */	public static var VOLLEY_AIM_LEFT:String  	= "volley balloon aim LEFT message";		/** 	 * Notification name bound to <code>VolleyAimRightCommand</code> command. 	 * Moves Volley Balloon to the left. Notification is broadcast	 * from <code>PlayScreenMediator</code>.	 *	 * @see balloonatroid.controller.VolleyAimRightCommand	 * @see balloonatroid.view.PlayScreenMediator#onVolleyRIGHT()	 */	public static var VOLLEY_AIM_RIGHT:String  	= "volley balloon aim RIGHT message";		/** 	 * Notification name bound to <code>GoBossWanderCommand</code> command. 	 * Transitions Boss Balloon to the wander state. Notification is broadcast	 * from <code>PlayScreenMediator</code>.	 *	 * @see balloonatroid.controller.GoBossWanderCommand	 * @see balloonatroid.view.PlayScreenMediator#handleNotification()	 */	public static var GO_BOSS_WANDER:String  	= "go to boss balloon wander-OFF-screen state";			/** 	 * Notification name bound to the command that transitions Boss Balloon to the roam state.	 *	 * @todo implement.	 */	public static var GO_BOSS_ROAM:String 	 	= "go to boss balloon roaming-ON-screen state";		/** 	 * Notification name bound to the command that transitions Boss Balloon to the attack state.	 *	 * @todo implement.	 */	public static var GO_BOSS_ATTACK:String 	= "go to boss balloon direct attack state";		/** 	 * Notification name bound to the command that transitions Boss Balloon to the evade state.	 *	 * @todo implement.	 */	public static var GO_BOSS_EVADE:String 		= "go to boss balloon evade state (when volley is in flight)";		/** 	 * Notification name bound to the command that transitions Boss Balloon to the hit state.	 *	 * @todo implement.	 */	public static var GO_BOSS_HIT:String	 	= "go to boss balloon has taken hit state";		/** 	 * Notification name that notifies that the Boss Balloon has been destroyed. 	 *	 * @todo implement.	 */	public static var BOSS_IS_DEAD:String	 	= "boss balloon has been destroyed message";		/** 	 * Notification name notifying that a defender balloon needs to be birthed. 	 * Notification is broadcast from the Boss Balloon <code>WanderState</code>.	 * <code>BossSpriteMediator</code> listens to the Notification and creates defender.	 *	 * @see balloonatroid.model.boss.WanderState	 * @see balloonatroid.view.PlayScreenMediator#handleNotification()	 */	public static var BIRTH_DEFENDER:String	 	= "boss balloon give birth to defender message";		/** 	 * Notification name bound to the command that transitions Defender Balloon to the roam state.	 *	 * @todo implement.	 */	public static var GO_DEFENDER_ROAM:String 	= "go to defender balloon roam state";		/** 	 * Notification name bound to <code>GoDefenderAttackCommand</code> command. 	 * Transitions Defender Balloon to the attack state. Notification is currently broadcast	 * from <code>BossSpriteMediator</code>. This will change as the Defender needs to 	 * start in the roam state right after birth.	 *	 * @see balloonatroid.controller.GoDefenderAttackCommand	 * @see balloonatroid.view.BossSpriteMediator#handleNotification()	 */	public static var GO_DEFENDER_ATTACK:String = "go to defender balloon direct attack state";			/** 	 * Notification name bound to the command that transitions Defender Balloon to the evade state.	 *	 * @todo implement.	 */	public static var GO_DEFENDER_EVADE:String 	= "go to defender balloon evade state (when volley is in flight)";		/** 	 * Notification name bound to <code>GoDefenderHitCommand</code> command. 	 * Transitions Defender Balloon to the hit state. Notification is broadcast	 * from <code>AttackState</code>. 	 *	 * @see balloonatroid.controller.GoDefenderHitCommand	 * @see balloonatroid.model.defender.AttackStater#execute()	 */	public static var GO_DEFENDER_HIT:String	= "go to defender balloon has taken hit state";		 /** 	 * Notification name bound to <code>DefenderIsDeadCommand</code> command. 	 * Notification is broadcast from Boss Balloon <code>AttackState</code>.  	 *	 * @see balloonatroid.controller.DefenderIsDeadCommand	 * @see balloonatroid.model.defender.AttackState#execute()	 */	public static var DEFENDER_IS_DEAD:String	= "defender balloon has been destroyed message";	 /** 	 * Notification name bound to <code>StartupCommand</code> command. 	 * Broadcast from <code>GameFacade</code>.  	 *	 * @see balloonatroid.controller.StartupCommand	 * @see #startup()	 */	public static var STARTUP:String  			= "startup and prepare model and view";		/** 	 * Notification name bound to <code>QuitCommand</code> command. 	 * Quits the game.  	 *	 * @see balloonatroid.controller.QuitCommand	 */	public static var QUIT:String  				= "quit the game";			/** 	 * Notification name bound to <code>LoadHistoryCommand</code> command. 	 * Broadcast on entry into the <code>SplashScreenState</code> to initiate	 * loading game history stored as a shared object in the phone.	 *	 * @see balloonatroid.controller.LoadHistoryCommand	 * see balloonatroid.model.game.SplashScreenState#enter()	 */	public static var LOADHISTORY:String  		= "load history from shared object";		/** 	 * Notification name that notifies successful loading of history shared object. 	 * Broadcast by the <code>GameHistoryProxy</code>. <code>SplashScreenMediator</code>	 * waits for this notification before drawing the splash screen UI.	 *	 * @see balloonatroid.model.GameHistoryProxy#loadCompleteHistory()	 * see balloonatroid.view.SplashScreenMediator#handleNotification()	 */	public static var HISTORYLOADED:String  	= "history loaded from shared object";		/** 	 * Notification name bound to <code>LoadLevelMovieCommand</code> command. 	 * Broadcast from the root timeline in <code>balloonatroid.fla</code> flash document	 * from the frame labeled "play_enter_trans_start". The level movie is loaded imemediately	 * following the end of the play screen entry animation.	 *	 * @see balloonatroid.controller.LoadLevelMovieCommand	 * @see <code>balloonatroid.fla</code> flash document.	 */	public static var LOADLEVELMOV:String  		= "load game level movie";		/** 	 * Notification name bound to <code>AddSpriteEntityCommand</code> command. 	 * Broadcast from mediators when sprites that need hit testing are initialized.	 *	 * @see balloonatroid.controller.AddSpriteEntityCommand	 * @see balloonatroid.view.DefenderSpriteMediator#init()	 */	public static var ADD_SPRITE_ENTITY:String  = "add sprite to global entities collection";		/** 	 * Notification name bound to <code>RemoveSpriteEntityCommand</code> command. 	 * Broadcast from mediators of destroyed sprites to take them hit-testing checks.	 *	 * @see balloonatroid.controller.AddSpriteEntityCommand	 * @see balloonatroid.view.DefenderSpriteMediator#cleanup()	 */	public static var REMOVE_SPRITE_ENTITY:String  = "remove sprite from global entities collection";		/** 	 * Notification name bound to the command that transitions game to the choose level state.	 *	 * @todo implement.	 */	public static var GO_CHOOSE:String  		= "goChoose";		// go to the choose level state		/** @deprecated After implementing state machine */	public static var PLAY_GAME:String  		= "playGame";		// start the game on the current level		/** @deprecated After implementing state machine */	public static var VOLLEY:String  			= "volley";			// volley the balloon (sets volly state)		/** @deprecated After implementing state machine */	public static var SHOW_BOSS:String  		= "showBoss";		// show boss		/**	 * Facade Singleton Factory method	 * 	 * @return the Singleton instance of the Facade cast to GameFacade	 */	public static function getInstance() : GameFacade 	{		if ( instance == null ) instance = new GameFacade( );		return GameFacade( instance );	}		/**	 * Initialize the Singleton <code>Facade</code> instance.	 * 	 * Called automatically by the superclass constructor. Overridden to	 * inititalize the Xray logger.	 *	 * @see <a href="http://osflash.org/xray">Xray ( The AdminTool )</a>	 */	private function initializeFacade(  ) : Void 	{		super.initializeFacade();		if (debug)		{			//init XRay LogManager			LogManager.initialize();			// get log instance			log = XrayLogger(LogManager.getLogger("com.blitzagency.xray.logger.XrayLogger"));		}	}	/**	 * Register Commands with the Controller 	 *	 * Called automatically by the superclass constructor. Overridden to register	 * commands.	 */	private function initializeController() : Void 	{		super.initializeController();				registerCommand( STARTUP, StartupCommand );		registerCommand( QUIT, QuitCommand );				// Game state transitions commands 		registerCommand( GO_SPLASH, GoGameSplashCommand );		registerCommand( GO_PLAY, GoGamePlayCommand );				// Volley balloon state transition commands and actions 		registerCommand( GO_VOLLEY_DORMANT,  GoVolleyDormantCommand );		registerCommand( GO_VOLLEY_INFLIGHT,  GoVolleyInFlightCommand );		registerCommand( GO_VOLLEY_RECOVER, GoVolleyRecoverCommand );		registerCommand( VOLLEY_AIM_LEFT, VolleyAimLeftCommand );		registerCommand( VOLLEY_AIM_RIGHT, VolleyAimRightCommand );				// Boss Balloon state transition commands and actions		registerCommand( GO_BOSS_WANDER, GoBossWanderCommand );				// Defender Defender state transition commands and action 		registerCommand( GO_DEFENDER_ATTACK, GoDefenderAttackCommand );		registerCommand( GO_DEFENDER_HIT, GoDefenderHitCommand );		registerCommand( DEFENDER_IS_DEAD, DefenderIsDeadCommand );				// Lodaing external resources 		registerCommand( LOADHISTORY, LoadHistoryCommand );		registerCommand( LOADLEVELMOV, LoadLevelMovieCommand );				// Maintaining sprite entitirs collection (for hit-testing) 		registerCommand( ADD_SPRITE_ENTITY, AddSpriteEntityCommand );		registerCommand( REMOVE_SPRITE_ENTITY, RemoveSpriteEntityCommand );	}		/**	 * Convenience method for starting the application. Called	 * from frame 1 of the main MovieClip, which passes a	 * reference to itself as the 'game' parameter. The GameMediator	 * will tend this reference.	 *	 * @param game the reference to the main MovieClip	 * @see Frame 1 of the 'actions' layer in <code>balloonatroid.fla</code>.	 */	public function startup( game : MovieClip ) : Void 	{		sendNotification( STARTUP, game ); // Start game	}	}